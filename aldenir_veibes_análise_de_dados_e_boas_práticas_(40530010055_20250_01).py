# -*- coding: utf-8 -*-
"""Aldenir Veibes - Análise de Dados e Boas Práticas (40530010055_20250_01).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Y9Rhv8e6ftrc5F7V3wj9yWK6Vx37g5wA

# MVP Análise de Dados e Boas Práticas

**Nome:** Aldenir Veibes Laurentino de Lima

**Matrícula:** 4052025000172

**Dataset:** [Wine Quality Dataset](https://archive.ics.uci.edu/dataset/186/wine+quality)

# Descrição do Problema

Prever a qualidade do vinho (nota de 0 a 10) com base em atributos físico-químicos da bebida, como acidez, teor alcoólico, açúcar residual, pH e dióxido de enxofre.

#Contexto dos Dados:
Origem: Vinho Verde (Vinho Verde DOC) produzido no norte de Portugal.

Tipos:

Red (tinto): **1.599 amostras**

White (branco): **4.898 amostras**

Cada linha representa uma amostra de vinho, com 11 atributos contínuos e uma nota de qualidade atribuída por degustadores.

## Hipóteses do Problema

As hipóteses que tracei são as seguintes:

- Qual atributo químico tem mais impacto na qualidade do vinho?

- É possível prever se um vinho será bom com base apenas na acidez e no álcool?

- Vinhos brancos tendem a ter notas mais altas que vinhos tintos?

## Tipo de Problema
O problema pode ser tratado como:

**Regressão:** Prever a nota exata de qualidade (0–10).

**Classificação:** Categorizar vinhos como "ruins", "médios" ou "bons" a partir da nota de qualidade. Por exemplo:

3–4 = ruim

5–6 = médio

7+ = bom

## Seleção de Dados

O dataset Wine Quality não necessita fazer seleção de dados externa para começar a trabalhar, pois ela já vem:

- Limpa
- Sem valores ausentes (missing values)
- Com colunas bem definidas e rotuladas
- Pronta para análise e modelagem

## Atributos do Dataset

| Atributo               | Tipo     | Descrição                         |
| ---------------------- | -------- | --------------------------------- |
| `fixed acidity`        | Numérico | Ácido tartárico (g/dm³)           |
| `volatile acidity`     | Numérico | Ácido acético (vinagre) (g/dm³)   |
| `citric acid`          | Numérico | Ácido cítrico (g/dm³)             |
| `residual sugar`       | Numérico | Açúcares residuais (g/dm³)        |
| `chlorides`            | Numérico | Cloretos (g/dm³)                  |
| `free sulfur dioxide`  | Numérico | SO₂ livre (mg/dm³)                |
| `total sulfur dioxide` | Numérico | SO₂ total (mg/dm³)                |
| `density`              | Numérico | Densidade (g/cm³)                 |
| `pH`                   | Numérico | Acidez (sem unidade)              |
| `sulphates`            | Numérico | Sulfatos (g/dm³)                  |
| `alcohol`              | Numérico | Teor alcoólico (% vol)            |
| `quality`              | Inteiro  | Nota sensorial atribuída (0 a 10) |

# Importação das Bibliotecas Necessárias e Carga de Dados

Esta seção consolida todas as importações de bibliotecas necessárias para a análise, visualização e pré-processamento dos dados, bem como o carregamento inicial do dataset Wine Quality.
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, MinMaxScaler, OneHotEncoder
from sklearn.decomposition import PCA
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline

# URLs do dataset de vinho tinto e branco
url_red = 'https://raw.githubusercontent.com/veiberlim/wine-quality-analysis/refs/heads/main/winequality-red.csv'
url_white = 'https://raw.githubusercontent.com/veiberlim/wine-quality-analysis/refs/heads/main/winequality-white.csv'

# carregamento do dataset (aqui, ele fica disponível nesse método)
df_red = pd.read_csv(url_red, sep=';')
df_white = pd.read_csv(url_white, sep=';')

# Adiciona a coluna que indica o tipo do vinho
df_red['type'] = 'red'
df_white['type'] = 'white'

# Junta os dois dataframes
df = pd.concat([df_red, df_white], ignore_index=True)

# primeiras linhas
df.head()

"""# Análise de Dados

Nesta etapa de Análise de Dados Exploratória (EDA) sobre o dataset Wine Quality, visamos entender a distribuição, as relações e as características das variáveis físico-químicas, o que é crucial para as etapas subsequentes de pré-processamento e modelagem.

## Total e Tipo das Instâncias

O dataset Wine Quality possui 6.497 instâncias (observações), sendo 1.599 de vinhos tintos e 4.898 de vinhos brancos. Todas as variáveis físico-químicas são numéricas (float), e o atributo 'type' é categórico (indica o tipo de vinho).
"""

print(f"Total de instâncias: {len(df)}")
print("\nTipos de dados por coluna:")
print(df.info())

# Gráfico de distribuição da variável alvo (quality)
plt.figure(figsize=(7, 5))
sns.countplot(x='quality', data=df, hue='type')
plt.title('Distribuição da Qualidade dos Vinhos')
plt.xlabel('Nota de Qualidade')
plt.ylabel('Contagem')
plt.show()

"""O gráfico de barras acima mostra como as amostras estão distribuídas em relação à nota de qualidade atribuída, separando visualmente os tipos de vinho (tinto e branco). Observamos que a maioria dos vinhos recebe nota 5 ou 6, indicando uma tendência à qualidade intermediária. Os vinhos brancos, por serem maioria, aparecem mais em quase todas as categorias. Poucas amostras têm notas extremas como 3 ou 8, evidenciando um leve desbalanceamento no conjunto.

## Estatísticas Descritivas

Estatísticas descritivas fornecem um resumo das características numéricas, incluindo média, desvio padrão, mínimo, máximo e quartis.
"""

# estatísticas descritivas básicas do dataset
df.describe()

"""### Média

A média é uma medida de tendência central que representa o valor típico ou o ponto de equilíbrio de um conjunto de dados. É calculada somando-se todos os valores e dividindo-se pelo número total de observações. É sensível a valores extremos (outliers).
"""

# média dos atributos numéricos do dataset
df.describe().loc['mean']

# Gráfico de barras das médias
plt.figure(figsize=(10, 6))
mean_values = df.describe().loc['mean']
mean_values.plot(kind='bar', color='skyblue')
plt.title('Média dos Atributos Numéricos do Vinho')
plt.ylabel('Valor Médio')
plt.xticks(rotation=45)
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.tight_layout()
plt.show()

"""### Desvio Padrão

O desvio padrão é uma medida de dispersão que quantifica a quantidade de variação ou dispersão de um conjunto de valores. Um desvio padrão baixo indica que os pontos de dados tendem a estar próximos da média do conjunto, enquanto um desvio padrão alto indica que os pontos de dados estão espalhados por uma faixa maior de valores. Ele é a raiz quadrada da variância.
"""

# desvio padrão dos atributos numéricos do dataset
std_values = df.describe().loc['std']
std_values

# Gráfico de linha para os desvios padrão
plt.figure(figsize=(10, 6))
plt.plot(std_values.index, std_values.values, marker='o', linestyle='-', color='coral')
plt.title('Desvio Padrão dos Atributos Numéricos do Vinho')
plt.ylabel('Desvio Padrão')
plt.xticks(rotation=45)
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.tight_layout()
plt.show()

"""## Histograma

A distribuição de dados descreve como os valores de uma variável se espalham, ou seja, a frequência com que diferentes valores ocorrem. Entender a distribuição é crucial na análise de dados, pois revela padrões, tendências centrais, dispersão e a presença de valores atípicos (outliers). O histograma é uma ferramenta visual fundamental para representar essa distribuição, mostrando a forma dos dados, se são simétricos ou assimétricos, unimodais ou multimodais.
"""

plt.figure(figsize=(8, 6))
sns.histplot(df['alcohol'], kde=True)
plt.title('Distribuição do Teor Alcoólico')
plt.xlabel('Álcool (%)')
plt.ylabel('Frequência')
plt.show()

"""### Curiosidades e fatos importantes sobre o álcool no dataset *Wine Quality*:

1. **Importância na qualidade do vinho:** O teor alcoólico é um dos fatores químicos que mais influencia a percepção de qualidade do vinho. Geralmente, vinhos com níveis moderados a altos de álcool tendem a ser avaliados com notas melhores, pois o álcool contribui para o corpo e o sabor do vinho.

2. **Faixa típica:** No dataset, o álcool varia geralmente entre cerca de 8% e 14%, o que é típico para vinhos comerciais. Valores fora dessa faixa podem indicar vinhos fora do padrão ou até erros na coleta.

3. **Distribuição assimétrica:**
O histograma costuma mostrar uma distribuição ligeiramente assimétrica, com a maior concentração de vinhos em torno de 10-12% de álcool. Isso indica que a maioria dos vinhos está nessa faixa considerada ideal.

4. **Relação com outras variáveis:** O álcool tem correlação positiva com qualidade, mas também com densidade (mais álcool geralmente significa menos densidade). Pode ser uma variável importante para modelos de predição da qualidade.
"""

# Histograma do pH com KDE
plt.figure(figsize=(8, 6))
sns.histplot(df['pH'], kde=True, color='mediumseagreen')
plt.title('Distribuição do pH dos Vinhos')
plt.xlabel('pH')
plt.ylabel('Frequência')
plt.show()

"""### *Análise do pH:*

- O pH mede a acidez do vinho, onde valores menores indicam maior acidez.
- No dataset, o pH varia entre aproximadamente 2.7 e 4.0, faixa típica para vinhos.
- A maioria dos vinhos tem pH entre 3.0 e 3.5, indicando um equilíbrio entre acidez e suavidade.
- A acidez é importante para o sabor e conservação do vinho, afetando a percepção da qualidade.

## Boxplot

Comparamos aqui as características químicas e outras medidas entre os dois tipos de vinho.

Por exemplo, você pode ver se o teor de álcool médio é diferente em vinhos tintos e brancos, ou se o pH varia entre eles.

Ajuda a identificar diferenças importantes entre os grupos que podem influenciar a qualidade ou perfil do vinho.
"""

# Estatísticas descritivas agrupadas por espécie
df.groupby('type').describe()

"""### *Distribuição do Alcool por tipo de vinho*

"""

# Boxplot por tipo de vinho
plt.figure(figsize=(10, 6))
sns.boxplot(x='type', y='alcohol', data=df)
plt.title('Distribuição do Álcool por Tipo de Vinho')
plt.xlabel('Tipo de Vinho')
plt.ylabel('Álcool (%)')
plt.show()

"""O boxplot mostra que os vinhos brancos tendem a ter um teor alcoólico mais elevado do que os vinhos tintos,com uma mediana visivelmente maior. Além disso, a distribuição do álcool nos brancos é mais dispersa, enquanto os tintos apresentam uma concentração maior de valores próximos à mediana. Essa diferença pode influenciar na percepção de qualidade entre os tipos.

## Matriz de Correlação

A matriz de correlação mede a força e a direção de uma relação linear que os atributos numéricos das espécies podem ter. Valores próximos a 1 indicam uma forte correlação positiva, -1 uma forte correlação negativa, e 0 ausência de correlação linear.
"""

# Matriz de correlação
print("\nMatriz de Correlação:")
df.corr(numeric_only=True)

plt.figure(figsize=(10, 8))
sns.heatmap(df.corr(numeric_only=True), annot=True, cmap='coolwarm', fmt=".2f")
plt.title('Matriz de Correlação dos Atributos Químicos')
plt.show()

"""O mapa de calor da matriz de correlação revela fortes correlações positivas entre *alcohol* e *quality*, além de correlação negativa entre *density* e *alcohol*. Também observamos relações entre *citric acid*, *fixed acidity* e *pH*. Essas correlações indicam que certas combinações de atributos se comportam de maneira semelhante ou oposta, o que pode ser útil na seleção de características para modelagem preditiva.

# Pré-Processamento de Dados

O pré-processamento de dados é uma etapa crucial para preparar os dados para modelagem, garantindo que estejam no formato correto e otimizados para o desempenho do algoritmo.
"""

# Separar features (X) e target (y)
X = df.drop(columns=['quality', 'type'])
y = df['quality']

# Dividir os dados em conjuntos de treino e teste
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)
print(f"Dimensões de X_train: {X_train.shape}")
print(f"Dimensões de X_test: {X_test.shape}")

scaler_norm = MinMaxScaler()
scaler_norm.fit(X_train)
X_train_normalized = scaler_norm.transform(X_train)
X_test_normalized = scaler_norm.transform(X_test)

"""## Normalização

A normalização escala os dados para um intervalo fixo, geralmente entre 0 e 1. No contexto do Wine Quality, isso é importante porque os atributos físico-químicos como *alcohol*, *density* e *citric acid* têm escalas diferentes. A normalização garante que nenhuma variável domine
o processo de aprendizado por estar em uma faixa numérica muito maior. Dessa forma, algoritmos de machine learning que são sensíveis à escala (como k-NN e redes neurais) podem aprender de forma mais justa e equilibrada.


"""

# Inicializar o MinMaxScaler
scaler_norm = MinMaxScaler()

# Aprende min e max APENAS de X_train
scaler_norm.fit(X_train)
X_train_normalized = scaler_norm.transform(X_train)
# Usa a média e o desvio padrão aprendidos de X_train
X_test_normalized = scaler_norm.transform(X_test)

# Exibir as primeiras linhas dos dados normalizados (como DataFrame para melhor visualização)
df_normalized = pd.DataFrame(X_train_normalized, columns=X_train.columns)

print("\nPrimeiras 5 linhas dos dados normalizados (treino):")
df_normalized.head()

# Visualização da distribuição após a normalização (exemplo para uma característica)
plt.figure(figsize=(8, 6))
sns.histplot(df_normalized['alcohol'], kde=True)
plt.title('Distribuição do Álcool (Normalizado)')
plt.xlabel('Álcool Normalizado')
plt.ylabel('Frequência')
plt.show()

"""O histograma do álcool após a normalização mostra que os valores foram escalados para o intervalo entre 0 e 1, preservando a forma geral da distribuição original. Essa transformação permite que o modelo aprenda de forma mais eficiente, evitando que variáveis com escalas maiores dominem o processo de aprendizado.

## Padronização

A padronização (ou Z-score scaling) transforma os dados para ter média 0 e desvio padrão 1. É útil para algoritmos que são sensíveis à escala das características, como SVMs ou redes neurais.
"""

# Inicializar o StandardScaler
scaler_std = StandardScaler()

# Aprende média e desvio padrão APENAS de X_train
scaler_std.fit(X_train)
X_train_standardized = scaler_std.transform(X_train)
# Usa a média e o desvio padrão aprendidos de X_train
X_test_standardized = scaler_std.transform(X_test)

# Exibir as primeiras linhas dos dados padronizados (como DataFrame para melhor visualização)
df_standardized = pd.DataFrame(X_train_standardized, columns=X_train.columns)

print("\nPrimeiras 5 linhas dos dados padronizados (treino):")
df_standardized.head()

# Visualização da distribuição após a padronização (exemplo para uma característica)
plt.figure(figsize=(8, 6))
sns.histplot(df_standardized['alcohol'], kde=True)
plt.title('Distribuição do Álcool (Padronizado)')
plt.xlabel('Álcool Padronizado')
plt.ylabel('Frequência')
plt.show()

"""O histograma do álcool após a padronização mostra que os valores foram transformados para ter média próxima de zero e desvio padrão igual a um, centralizando a distribuição. Isso é útil especialmente para algoritmos sensíveis à escala dos dados, como SVMs e redes neurais, melhorando sua performance e estabilidade numérica.

## Tratamento de Valores Nulos

O dataset Iris original não possui valores nulos. No entanto, o tratamento de valores nulos é crucial e pode envolver imputação (preenchimento com média, mediana, moda) ou remoção de linhas/colunas.
"""

# Verificar a presença de valores nulos no dataset original
print("Valores nulos no dataset Wine Quality:")
df.isnull().sum()

"""## Outras Transformações e Etapas de Pré-Processamento

- Seleção de características (feature selection): podemos utilizar técnicas como análise de correlação, importância de atributos via modelos de árvore (RandomForest, XGBoost) ou métodos estatísticos para reduzir o número de variáveis mantendo apenas as mais relevantes para a predição da qualidade do vinho.

- Redução de dimensionalidade: técnicas como PCA (Análise de Componentes Principais) podem ser aplicadas para comprimir a informação presente em muitas variáveis em um número menor de componentes principais, o que reduz ruído e melhora a eficiência de modelos complexos.

- Criação de novas variáveis (feature engineering): por exemplo, podemos criar um atributo derivado entre 'free sulfur dioxide' e 'total sulfur dioxide' para capturar sua proporção, que pode ser um indicativo relevante de preservação e sabor.

- Balanceamento de classes: como a variável alvo (quality) é desbalanceada — com poucas amostras para notas 3 ou 8 — podemos usar técnicas como oversampling (SMOTE) ou undersampling para equilibrar a distribuição de rótulos e melhorar a capacidade preditiva dos modelos.

- Detecção e remoção de outliers: com boxplots ou métodos como IQR ou Isolation Forests, podemos identificar amostras extremas que poderiam distorcer os modelos.

Essas etapas podem ser exploradas em estudos posteriores ou aplicadas conforme o algoritmo de machine learning utilizado.

# Conclusão

A análise e pré-processamento do dataset Wine Quality evidenciaram as principais características químicas associadas à nota de qualidade atribuída por especialistas. Os vinhos brancos tendem a ter mais observações, mas tanto eles quanto os tintos mostram padrões distintos de distribuição para atributos como teor alcoólico, sulfatos e acidez. O dataset é limpo, sem valores nulos, e pronto para modelagem. A matriz de correlação revelou fortes relações entre variáveis como 'alcohol' e 'density' ou 'sulphates'. A aplicação de normalização e padronização é importante para garantir desempenho consistente nos algoritmos de machine learning.
"""